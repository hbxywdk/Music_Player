1. 数据
2.取得页面所需元素 @

	this.全局音量=1
	this.全局第几首=1
	this.全局播放进度=0
	this.全局歌词行数=xxx
	this.全局播放模式=顺序


3.初始化 init（数据）｛ @
	this.data=数据

	this.填充歌曲列表函数（）

	拿到第一条
	切歌函数（第一首）
｝
4.切歌函数(x){ @

	如果是自己播放完的就在对应播放模式取到 对应歌曲播放 上下曲不执行

	获取对应的歌曲、长度、歌词、封面、地址
	this.x=x
	this.长度=长度
	this.歌词=歌词
	this.封面=封面
	this.地址=地址

	设置 歌曲、长度、歌词、封面、地址

	改变歌单 状态

	this.播放函数（）

}
5.填充歌曲列表函数（）｛ @
	xxxxxx
｝
6.歌曲播放进度监控函数（）｛ @
	监听歌曲相关信息
	
	this.时间=实时时间
	this.歌词显示位置=实时歌词显示位置
	this.进度条位置=实时进度条位置
	实时改变歌曲时间、歌词显示位置、进度条位置

	进度条函数（）
	歌曲时间函数（）
	歌词显示函数（）  （到达对应时间点 改变歌词位置）




	监听歌曲播放完成 执行下一曲 切歌函数（）
｝
8.进度条拖动函数（）｛ @
	最小值=0

	//拖动型
	down（）｛
		move（）｛
			x < 0 return
			x > this.父元素宽度 return（resize函数中此值会不断变化）

		｝
		up（）｛
			取消move事件

			改变当前this时间 this进度 this歌词位置

			跳转播放函数（）
		｝
	｝

	//直接点击型
	计算对应百分比
	跳转播放函数（）
｝
9.音量控制函数（）｛ @
	最小值=0

	//拖动型
	down（）｛
		move（）｛
			x < 0 return
			x > this.父元素宽度 return

		+ - 声音
		｝
		up（）｛
			取消move事件
		｝
	｝

	//直接点击型
	计算对应百分比
	+ - 声音
｝

11.跳转播放函数（）｛ @
	重新设置全局this的几个变量

	执行跳转
｝
13.上一首（）｛ @
	this.全局第几首--
	<1  就 = 最后一个
	
｝
13.下一首（）｛ @
	this.全局第几首--
	<最后一个 就=1 
｝
15.暂停（）｛ @
	执行暂停
｝
16.进度条函数（）｛ @

｝
17.歌曲时间函数（）｛ @

｝

18.歌词显示函数（）｛

｝
12.歌词拖动跳转函数（）｛
	拖动结束位置

	计算对应百分比
	this.跳转播放函数（）
｝